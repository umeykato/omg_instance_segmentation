#!/usr/bin/env python
# -*- coding: utf-8 -*-

import glob
import os
import sys

import numpy as np
import pandas as pd

# import adelWheat
import mesh2pointcloud
import isomap
import spline

def create_wheat_object():
    pass    
def save_obj():
    pass


"""
process: objファイルのverticesとfacesを読み込む
input: 　ファイルパス
output:  vertices(list), faces(list)

example
input:
# File generated by PlantGL - Tue Oct 30 15:37:24 2018
v    2.588363 -6.602834 8.044830
v    2.568976 -6.603157 8.259387
v    2.462679 -6.567574 8.804282
v    2.317401 -6.434402 9.777472
v    2.058485 -6.264706 8.043112
v    2.065371 -6.281794 8.257754
v    2.139909 -6.361606 8.803236
v    2.317401 -6.434402 9.777472

g 0 
f 1 5 6
f 2 6 7
f 1 6 2
f 2 7 3
f 3 7 8

output:
[[2.588363, -6.602834, 8.04483],
 [2.568976, -6.603157, 8.259387],
 [2.462679, -6.567574, 8.804282],
 [2.317401, -6.434402, 9.777472],
 [2.058485, -6.264706, 8.043112],
 [2.065371, -6.281794, 8.257754],
 [2.139909, -6.361606, 8.803236],
 [2.317401, -6.434402, 9.777472]]
[[1, 5, 6],
 [2, 6, 7],
 [1, 6, 2],
 [2, 7, 3],
 [3, 7, 8]]
 
"""
def load_obj(filePath):
    vertices_df = pd.DataFrame(columns=['x','y','z'])
    vertices = []
    faces = []
    for line in open(filePath, "r"):
        vals = line.split()
        if len(vals) == 0:
            continue
        if vals[0] == "v":
            v = list(map(float, vals[1:4]))
            vertices.append(v)
        if vals[0] == "f":
            f = list(map(int, vals[1:4]))
            faces.append(f)

    vertices_array = np.array(vertices)
    faces_array = np.array(faces)

    vertices_df = pd.DataFrame(vertices_array, columns=['x','y','z'])
    faces_df = pd.DataFrame(faces_array, columns=['v1','v2','v3'])

    # return vertices,faces
    # return vertices_array, faces_array
    return vertices_df, faces_df

def save_ply(save_path, pointcloud):
    print(save_path)
    print(pointcloud)

    result = pd.DataFrame()

    result["x"] = pointcloud[:,0]
    result["y"] = pointcloud[:,1]
    result["z"] = pointcloud[:,2]

    from pyntcloud.io import write_ply
    write_ply(save_path,points=result,as_text=True)

def main():
    # test_ades_weat_loop, myadel, objでオオムギ生成，葉ごとに分割して保存（生成時のパラメータ等保存）
    # 保存する物：オオムギ全体，茎，緑葉，茶葉，葉のobjファイル，生成時のパラメータ
    # adelWheat.growth_wheat_someage()

    # age
    for i in range(100, 1100, 100):
        # file num
        for j in range(len(os.listdir('./obj/leaf_age{}'.format(i)))):
            fname = './obj/leaf_age{}/{}.obj'.format(i, j)
            save_dir = './ply_render3d/leaf_age{}'.format(i)
            try:
                os.mkdir(save_dir)
            except:
                pass
            split_text = os.path.splitext(fname)
            print(fname)

            # obj読み込んで点群作成（plyでも保存）
            # 保存する物：各objをplyファイルに変換したもの，

            v, f = load_obj(fname)
            pc, pc_array = mesh2pointcloud.mesh2pointcloud_dataframe(v, f)
            save_ply(save_dir + '/PointCloud_{}.ply'.format(j),pc_array)
            
            # isomap, splineで点を算出し保存（iso展開時の画像保存，求めた補完点との重ね合わせ画像も）
            # 保存する物：

            iso, iso_center, center, control = isomap.isomap_centerline(pc)
            save_ply(save_dir + '/ControlPoints_{}.ply'.format(j),control)
            save_ply(save_dir + '/CenterLine_{}.ply'.format(j),center)



            control_points = []
            control_points.append(control[0])
            for k in range(len(control)):
                control_points.append(control[k])
            control_points.append(control[len(control)-1])

            sp = spline.CatmullRomSpline(control_points, len(control_points))
            save_ply(save_dir + '/SplinePoints_{}.ply'.format(j),np.array(sp))

            # print('cp = ', cp)
            # print('sp = ', sp)

    

if __name__=='__main__':
    main()
